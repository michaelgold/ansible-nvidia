---
- name: Setup NVIDIA Drivers, Docker with GPU support, Portainer, and Python 3.11 on Ubuntu 24
  hosts: localhost
  become: yes
  vars:
      python_version: 3.11.9

  tasks:
    - name: Install necessary packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - software-properties-common
        - ubuntu-drivers-common

    - name: Detect and install the best match NVIDIA driver
      command: ubuntu-drivers install
      when: ansible_distribution == 'Ubuntu'

    - name: Add Docker official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present

    - name: Install Docker Engine
      apt:
        name: docker-ce
        state: latest
        update_cache: yes

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'

    - name: Install NVIDIA Container Toolkit
      shell: |
        distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
        curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
        curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
        apt-get update && sudo apt-get install -y nvidia-container-toolkit
        systemctl restart docker

    - name: Install Portainer
      docker_container:
        name: portainer
        image: portainer/portainer-ce
        state: started
        restart_policy: always
        ports:
          - "9000:9000"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "portainer_data:/data"

    - name: Install dependencies for pyenv and Python build
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - make
        - build-essential
        - libssl-dev
        - zlib1g-dev
        - libbz2-dev
        - libreadline-dev
        - libsqlite3-dev
        - wget
        - curl
        - llvm
        - libncursesw5-dev
        - xz-utils
        - tk-dev
        - libxml2-dev
        - libxmlsec1-dev
        - libffi-dev
        - liblzma-dev

    - name: Install pyenv
      git:
        repo: 'https://github.com/pyenv/pyenv.git'
        dest: "{{ ansible_env.HOME }}/.pyenv"
        version: master
      become_user: "{{ ansible_env.USER }}"

    - name: Set environment variables for pyenv
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        line: "{{ item }}"
        state: present
      loop:
        - 'export PYENV_ROOT="$HOME/.pyenv"'
        - 'export PATH="$PYENV_ROOT/bin:$PATH"'
        - 'eval "$(pyenv init --path)"'

    - name: Install Python 3.11 using pyenv
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv install -s {{ python_version }}
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv/versions/{{ python_version }}"
      become_user: "{{ ansible_env.USER }}"

    - name: Set global Python version to 3.11
      shell: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv global {{ python_version }}
      become_user: "{{ ansible_env.USER }}"